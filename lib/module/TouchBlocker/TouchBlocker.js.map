{"version":3,"sources":["TouchBlocker.tsx"],"names":["React","PanResponder","View","panResponder","create","onPanResponderTerminationRequest","onStartShouldSetPanResponderCapture","onShouldBlockNativeResponder","TouchBlocker","enableTouchEvents","props","panHanlders","panHandlers"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,IAAvB,QAAmC,cAAnC;AAGA,MAAMC,YAAY,GAAGF,YAAY,CAACG,MAAb,CAAoB;AACvCC,EAAAA,gCAAgC,EAAE,MAAM,KADD;AAEvCC,EAAAA,mCAAmC,EAAE,MAAM,IAFJ;AAGvCC,EAAAA,4BAA4B,EAAE,MAAM;AAHG,CAApB,CAArB;;AAMA,MAAMC,YAAyC,GAAG,QAG5C;AAAA,MAH6C;AACjDC,IAAAA,iBAAiB,GAAG,KAD6B;AAEjD,OAAGC;AAF8C,GAG7C;AACJ,QAAMC,WAAW,GAAGF,iBAAiB,GAAG,EAAH,GAAQN,YAAY,CAACS,WAA1D;AACA,sBAAO,oBAAC,IAAD,eAAUF,KAAV,EAAqBC,WAArB,EAAP;AACD,CAND;;AAQA,eAAeH,YAAf","sourcesContent":["import React from 'react'\nimport { PanResponder, View } from 'react-native'\nimport { TouchBlockerProps } from './types'\n\nconst panResponder = PanResponder.create({\n  onPanResponderTerminationRequest: () => false,\n  onStartShouldSetPanResponderCapture: () => true,\n  onShouldBlockNativeResponder: () => true\n})\n\nconst TouchBlocker: React.FC<TouchBlockerProps> = ({\n  enableTouchEvents = false,\n  ...props\n}) => {\n  const panHanlders = enableTouchEvents ? {} : panResponder.panHandlers\n  return <View {...props} {...panHanlders} />\n}\n\nexport default TouchBlocker\n"]}